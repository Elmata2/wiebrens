{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/jortwiebrens/Documents/VSCODE/wiebrens/src/lib/markdown.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\n\nconst contentDirectory = path.join(process.cwd(), 'src/content');\n\nexport function getMarkdownContent(filename: string) {\n  const filePath = path.join(contentDirectory, `${filename}.md`);\n  const fileContents = fs.readFileSync(filePath, 'utf8');\n  const { data, content } = matter(fileContents);\n  \n  return {\n    metadata: data,\n    content: content\n  };\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,mBAAmB,6FAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAE3C,SAAS,mBAAmB,QAAgB;IACjD,MAAM,WAAW,6FAAA,CAAA,UAAI,CAAC,IAAI,CAAC,kBAAkB,GAAG,SAAS,GAAG,CAAC;IAC7D,MAAM,eAAe,2FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;IAC/C,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,UAAM,AAAD,EAAE;IAEjC,OAAO;QACL,UAAU;QACV,SAAS;IACX;AACF"}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///Users/jortwiebrens/Documents/VSCODE/wiebrens/src/app/mijn_verhaal/page.tsx"],"sourcesContent":["import Markdown from \"markdown-to-jsx\";\nimport { getMarkdownContent } from \"@/lib/markdown\";\n\nexport default function VerhaalPage() {\n  const { content, metadata } = getMarkdownContent(\"jaap-wiebrens\");\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <main className=\"container mx-auto px-4 py-8\">\n        <article className=\"prose prose-invert mx-auto\">\n          <Markdown>{content}</Markdown>\n        </article>\n      </main>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AADA;;;;AAGe,SAAS;IACtB,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAA,GAAA,sHAAA,CAAA,qBAAkB,AAAD,EAAE;IAEjD,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAK,WAAU;sBACd,cAAA,8OAAC;gBAAQ,WAAU;0BACjB,cAAA,8OAAC,gKAAA,CAAA,UAAQ;8BAAE;;;;;;;;;;;;;;;;;;;;;AAKrB"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"file":"index.module.js","sources":["file:///Users/jortwiebrens/Documents/VSCODE/wiebrens/node_modules/markdown-to-jsx/index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  let tableRow = source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/( *(?:`[^`]*`|\\\\\\||\\|) *)/)\n    .reduce((nodes, fragment) => {\n      if (fragment.trim() === '|')\n        nodes.push(\n          tableOutput\n            ? { type: RuleType.tableSeparator }\n            : { type: RuleType.text, text: fragment }\n        )\n      else if (fragment !== '') nodes.push.apply(nodes, parse(fragment, state))\n      return nodes\n    }, [] as MarkdownToJSX.ParserResult[])\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.trimEnd()\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    state.prevCapture = state.prevCapture || ''\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n\n        const capture = rule.match(source, state)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n\n          // retain what's been processed so far for lookbacks\n          state.prevCapture += currCaptureString\n\n          source = source.substring(currCaptureString.length)\n\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n          break\n        }\n\n        i++\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(source: string, state: MarkdownToJSX.State) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return options.createElement(\n      wrapper,\n      { key: 'outer' },\n      jsx\n    ) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' +\n            options.slugify(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor || options.disableAutoLink) {\n          return null\n        }\n\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => React.ReactChild\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactChild,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactChild\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"],"names":["Priority","RuleType","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","class","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BLOCKQUOTE_ALERT_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","FRONT_MATTER_R","GFM_TASK_R","HEADING_R","HEADING_ATX_COMPLIANT_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_TRIM_PIPES","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","INLINE_SKIP_R","TEXT_BOLD_R","RegExp","TEXT_EMPHASIZED_R","TEXT_MARKED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","ORDERED_LIST_BULLET","UNORDERED_LIST_BULLET","generateListItemPrefix","type","ORDERED_LIST_ITEM_PREFIX","UNORDERED_LIST_ITEM_PREFIX","generateListItemPrefixRegex","ORDERED_LIST_ITEM_PREFIX_R","UNORDERED_LIST_ITEM_PREFIX_R","generateListItemRegex","ORDERED_LIST_ITEM_R","UNORDERED_LIST_ITEM_R","generateListRegex","bullet","ORDERED_LIST_R","UNORDERED_LIST_R","generateListRule","h","ordered","LIST_R","LIST_ITEM_R","LIST_ITEM_PREFIX_R","match","source","state","isStartOfLine","exec","prevCapture","list","inline","simple","order","parse","capture","start","undefined","items","replace","lastItemWasAParagraph","map","item","i","space","length","spaceRegex","content","isLastItem","thisItemIsAParagraph","indexOf","adjustedContent","oldStateInline","oldStateList","result","render","node","output","key","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","concat","slugify","str","parseTableAlignCapture","alignCapture","test","parseTableRow","tableOutput","prevInTable","inTable","tableRow","trim","split","nodes","fragment","push","apply","cells","forEach","trimEnd","parseTable","align","rowText","parseTableCells","header","children","getTableStyle","colIndex","textAlign","inlineRegex","regex","simpleInlineRegex","blockRegex","anyScopeRegex","matchParagraph","every","line","some","captured","sanitizer","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","cx","slice","call","arguments","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","getTag","tag","overrides","override","compiler","markdown","options","props","overrideProps","_options","createElement","_extends","className","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","index","delimiterIdx","_","letter","toUpperCase","normalizeAttributeKey","value","first","unquote","mappedKey","normalizedValue","sanitizeUrlFn","styles","kvPair","substr","attributeValueToJSXPropValue","React","footnotes","refs","rules","_rules","_capture$0$replace$ma","alert","unshift","attrs","noInnerParse","__","lang","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","_capture$3$match","trimmer","trimmed","parseFunc","r","tagName","ast","inAnchor","alt","title","disableAutoLink","address","fallbackChildren","style","row","c","full","inner","disableParsingRawHTML","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","normalizeWhitespace","parserFor","userRender","renderer","createRenderer","renderRule","patchedRender","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","_ref","_ref$children","_objectWithoutPropertiesLoose","_excluded","cloneElement"],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 965, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 971, "column": 0}, "map": {"version":3,"sources":["file:///Users/jortwiebrens/Documents/VSCODE/wiebrens/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AAeA,cAAc;AAdd,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAKzE,SAASE,IAAI,EAAEC,KAAK,GAAE;AAStB,iCAAiC;;;;;;;;AAEjC,OAAO,MAAMG,eAAe,6CAAA;IAC1BC,MAAAA,GAASC;IACTC,EAAAA,OAAAA;IAAAA,CAAWC;IAAAA;QACb,EAAC,UAAA;YAAA;YAAA;gBAED,YAAA;oBAAA,CAAc;oBAAA,CAEd,yBAFkD;oBAElD,yDAA4D;wBAC5D,KAAO,KAAA,CAAMC;wBAAAA,QAAc;4BAAA,GAAIX,CAAAA,gBAAmB;4BAAA;yBAAA;;mBAChDY,YAAY;;iBACVC,MAAMZ,UAAUa,QAAQ;sBACxBC,IAAAA,CAAM,CAAA;YAAA;SAAA;;SACNC,UAAU;cACV,IAAA;YAAA,MAAA,4BAA2C;iBAC3CC,MAAAA,MAAY,EAAA;wBAAA;4BACZC,KAAAA,CAAAA,GAAAA,CAAU,0KAAVA,CAAAA,sBAAU,EAAA,MAAA,MAAA,MAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;4BACVC,OAAAA,qTAAU,EAAE,QAAA,CAAA,KAAA,CAAA,CAAA,EAAA,iTAAA,CAAA,UAAA,CAAA,MAAA,EAAA;4BACd,MAAA,CAAA,YAAA,CAAA;wBACAC;qBAAAA,MAAU;gBACRC,YAAYnB;UACd;QAAA,UAAA;YAAA,IAAA;YAAA;SAAA;QACF,CAAE,YAAA;YAAA,IAAA;YAAA;SAAA","ignoreList":[0]}},
    {"offset": {"line": 1064, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}